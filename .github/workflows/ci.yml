name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
  workflow_dispatch:

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install . pytest

      - name: Run pytest
        run: pytest

  unsigned-routes:
    name: Post unsigned route smoke test
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install python-gswap-sdk
        run: |
          python -m pip install --upgrade pip
          python -m pip install .

      - name: Run unsigned route smoke tests
        id: routes
        env:
          INPUT_TOKEN: "GALA|Unit|none|none"
          OUTPUT_TOKEN: "GUSDC|Unit|none|none"
          INPUT_AMOUNT: "1"
          POOL_FEE: "500"
          WALLET_ADDRESS: "eth|5AEDA56215b167893e80B4fE645BA6d5Bab767DE"
          ASSET_LIMIT: "5"
          POSITION_LIMIT: "5"
        run: python .github/scripts/run_unsigned_routes.py

      - name: Comment unsigned route results on PR
        uses: actions/github-script@v7
        env:
          INPUT_TOKEN: "GALA|Unit|none|none"
          OUTPUT_TOKEN: "GUSDC|Unit|none|none"
          INPUT_AMOUNT: "1"
          POOL_FEE: "500"
          OUT_AMOUNT: ${{ steps.routes.outputs.quote_out_amount }}
          PRICE_IMPACT: ${{ steps.routes.outputs.quote_price_impact_pct }}
          CURRENT_PRICE: ${{ steps.routes.outputs.quote_current_price }}
          NEW_PRICE: ${{ steps.routes.outputs.quote_new_price }}
          FEE_TIER: ${{ steps.routes.outputs.quote_fee_tier }}
          POOL_LIQUIDITY: ${{ steps.routes.outputs.pool_liquidity }}
          POOL_SQRT_PRICE: ${{ steps.routes.outputs.pool_sqrt_price }}
          POOL_SPOT_PRICE: ${{ steps.routes.outputs.pool_spot_price }}
          POOL_TICK_SPACING: ${{ steps.routes.outputs.pool_tick_spacing }}
          ASSET_COUNT: ${{ steps.routes.outputs.assets_count }}
          ASSET_TOP_SYMBOL: ${{ steps.routes.outputs.assets_top_symbol }}
          ASSET_TOP_QUANTITY: ${{ steps.routes.outputs.assets_top_quantity }}
          POSITION_COUNT: ${{ steps.routes.outputs.positions_count }}
          POSITION_SUMMARY: ${{ steps.routes.outputs.positions_first_summary }}
        with:
          script: |
            const marker = '<!-- gswap-unsigned-routes -->';
            const assetSummary = process.env.ASSET_COUNT === '0'
              ? '- **Wallet Assets**: No assets returned'
              : `- **Wallet Assets**: ${process.env.ASSET_COUNT} tokens (top: ${process.env.ASSET_TOP_SYMBOL} ${process.env.ASSET_TOP_QUANTITY})`;
            const positionSummary = process.env.POSITION_COUNT === '0'
              ? '- **Wallet Positions**: No active positions'
              : `- **Wallet Positions**: ${process.env.POSITION_COUNT} positions (${process.env.POSITION_SUMMARY})`;

            const body = `${marker}\n` +
              '### gSwap Unsigned Route Smoke Test\n\n' +
              `- **Quote**: ${process.env.INPUT_AMOUNT} ${process.env.INPUT_TOKEN.split('|')[0]} â†’ ${process.env.OUT_AMOUNT} ${process.env.OUTPUT_TOKEN.split('|')[0]} (fee ${process.env.FEE_TIER} bps, price impact ${process.env.PRICE_IMPACT}%)\n` +
              `- **Pool**: fee ${process.env.POOL_FEE} bps, sqrt price ${process.env.POOL_SQRT_PRICE}, spot price ${process.env.POOL_SPOT_PRICE}, liquidity ${process.env.POOL_LIQUIDITY}, tick spacing ${process.env.POOL_TICK_SPACING}\n` +
              `${assetSummary}\n` +
              `${positionSummary}\n\n` +
              '<sub>Generated by python-gswap-sdk CI</sub>';

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existing = comments.find(comment => comment.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }
          

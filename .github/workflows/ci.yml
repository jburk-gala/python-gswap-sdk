name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
  workflow_dispatch:

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install . pytest

      - name: Run pytest
        run: pytest

  quote:
    name: Post gSwap quote
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install python-gswap-sdk from PyPI
        run: |
          python -m pip install --upgrade pip
          python -m pip install python-gswap-sdk

      - name: Request quote
        id: quote
        env:
          INPUT_TOKEN: "GALA|Unit|none|none"
          OUTPUT_TOKEN: "GUSDC|Unit|none|none"
          INPUT_AMOUNT: "1"
        run: |
          python <<'PY'
          import os
          from decimal import Decimal, ROUND_HALF_UP
          from gswap_sdk import GSwap

          input_token = os.environ["INPUT_TOKEN"]
          output_token = os.environ["OUTPUT_TOKEN"]
          input_amount = Decimal(os.environ["INPUT_AMOUNT"])

          client = GSwap()
          quote = client.quoting.quote_exact_input(input_token, output_token, input_amount)

          def format_decimal(value: Decimal, places: int = 6) -> str:
              quant = Decimal(1).scaleb(-places)
              rounded = value.quantize(quant, rounding=ROUND_HALF_UP)
              return format(rounded.normalize(), 'f')

          out_amount = format_decimal(quote.out_token_amount)
          price_impact_pct = format_decimal(quote.price_impact * Decimal(100), places=4)
          current_price = format_decimal(quote.current_price, places=6)
          new_price = format_decimal(quote.new_price, places=6)

          output_path = os.environ["GITHUB_OUTPUT"]
          with open(output_path, "a", encoding="utf-8") as handle:
              handle.write(f"out_amount={out_amount}\n")
              handle.write(f"price_impact_pct={price_impact_pct}\n")
              handle.write(f"current_price={current_price}\n")
              handle.write(f"new_price={new_price}\n")
              handle.write(f"fee_tier={quote.fee_tier}\n")
          PY

      - name: Comment quote on PR
        uses: actions/github-script@v7
        env:
          INPUT_TOKEN: "GALA|Unit|none|none"
          OUTPUT_TOKEN: "GUSDC|Unit|none|none"
          INPUT_AMOUNT: "1"
          OUT_AMOUNT: ${{ steps.quote.outputs.out_amount }}
          PRICE_IMPACT: ${{ steps.quote.outputs.price_impact_pct }}
          CURRENT_PRICE: ${{ steps.quote.outputs.current_price }}
          NEW_PRICE: ${{ steps.quote.outputs.new_price }}
          FEE_TIER: ${{ steps.quote.outputs.fee_tier }}
        with:
          script: |
            const marker = '<!-- gswap-quote -->';
            const body = `${marker}\n` +
              '### gSwap Quote Result\n\n' +
              `- **Input Token**: \`${process.env.INPUT_TOKEN}\`\n` +
              `- **Output Token**: \`${process.env.OUTPUT_TOKEN}\`\n` +
              `- **Input Amount**: ${process.env.INPUT_AMOUNT}\n` +
              `- **Estimated Output**: ${process.env.OUT_AMOUNT} ${process.env.OUTPUT_TOKEN.split('|')[0]}\n` +
              `- **Price Impact**: ${process.env.PRICE_IMPACT}%\n` +
              `- **Fee Tier**: ${process.env.FEE_TIER} bps\n` +
              `- **Current Price**: ${process.env.CURRENT_PRICE}\n` +
              `- **New Price**: ${process.env.NEW_PRICE}\n\n` +
              '<sub>Generated by python-gswap-sdk CI</sub>';

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existing = comments.find(comment => comment.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }
          

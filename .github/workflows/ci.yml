name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
  workflow_dispatch:

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install . pytest

      - name: Run pytest
        run: pytest

  readonly-routes:
    name: Post read-only route results
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install python-gswap-sdk
        run: |
          python -m pip install --upgrade pip
          python -m pip install .

      - name: Run read-only route checks
        id: readonly
        env:
          INPUT_TOKEN: "GALA|Unit|none|none"
          OUTPUT_TOKEN: "GUSDC|Unit|none|none"
          INPUT_AMOUNT: "1"
          OUTPUT_AMOUNT: "0.5"
          FEE_TIER: "500"
          WALLET_ADDRESS: "eth|6cd13b1c31B4E489788F61f2dbf854509D608F42"
          ASSET_LIMIT: "5"
          POSITION_LIMIT: "5"
        run: python scripts/run_readonly_routes.py

      - name: Comment route results on PR
        uses: actions/github-script@v7
        env:
          COMMENT_BODY: ${{ steps.readonly.outputs.comment_body }}
        with:
          script: |
            const marker = '<!-- gswap-readonly -->';
            const body = process.env.COMMENT_BODY;

            if (!body) {
              core.setFailed('Missing comment body from read-only route checks');
              return;
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existing = comments.find(comment => comment.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }
          
